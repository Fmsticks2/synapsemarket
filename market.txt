{
  "project_name": "Synapse Market",
  "tagline": "AI-Powered Real-Time Intelligence Markets on Linera",
  "description": "Synapse Market is a decentralized, real-time prediction and information market platform powered by Linera's microchain architecture. It enables users and AI agents to trade, create, and resolve micro-markets instantly — achieving a seamless, Web2-speed Web3 experience.",

  "objectives": {
    "core_goal": "Demonstrate Linera's real-time scalability and AI-agent integration by building a live, autonomous prediction market system.",
    "key_features": [
      "AI and human participants in real-time micro-markets",
      "Instant creation, settlement, and update of markets using Linera microchains",
      "Per-minute or per-event market resolution with automatic payouts",
      "AI bots capable of trading and managing markets autonomously via MCP/GraphQL",
      "Interactive frontend dashboard with live updates and agent activity visualization"
    ]
  },

  "value_proposition": {
    "for_users": "Participate in fast, low-latency markets with instant results and fair pricing.",
    "for_AI_agents": "Autonomously create and resolve markets, using external data or learning models.",
    "for_Linera": "Showcases Linera’s microchain parallelism, real-time UX, and AI-native design."
  },

  "target_users": [
    "Web3 prediction market enthusiasts",
    "DeFi traders seeking fast markets",
    "AI developers and autonomous agent creators",
    "Builders testing Linera’s microchains in real-world use"
  ],

  "system_architecture": {
    "overview": "Each user and AI agent operates a personal microchain managing positions, trades, and balances. A shared market registry microchain tracks all active markets. Off-chain AI services interact with these chains via Linera’s MCP/GraphQL interface for real-time actions.",
    "components": {
      "frontend": "React + TypeScript web dashboard using Linera SDK for contract calls and WebSocket for live updates.",
      "smart_contracts": "Linera smart contracts for market registry, market logic, and user microchains.",
      "backend_agents": "Node.js or Golang agent layer interfacing with OpenAI APIs, WebSocket feeds, and Linera SDK.",
      "database": "Lightweight cache (Redis or SQLite) for temporary agent state tracking.",
      "oracles": "Optional REST or WebSocket adapters for price/sports/event data."
    }
  },

  "smart_contract_design": {
    "contracts": [
      {
        "name": "MarketRegistry",
        "purpose": "Stores all active markets and references to their microchains.",
        "functions": {
          "create_market": "Registers a new market microchain with metadata (topic, options, expiry).",
          "list_markets": "Returns all active markets with states.",
          "close_market": "Finalizes and archives a market reference."
        },
        "state_variables": ["market_list", "creator_address", "timestamp"]
      },
      {
        "name": "MarketMicrochain",
        "purpose": "Handles trades, odds, resolution, and payouts for a single market.",
        "functions": {
          "place_bet": "Accepts bet amount, prediction option, and updates total pool.",
          "resolve_market": "Sets winning option and triggers on-chain payouts.",
          "get_state": "Returns live odds and pool sizes.",
          "subscribe_updates": "Streams state changes to frontend or agents."
        },
        "state_variables": [
          "options",
          "total_pool",
          "bets",
          "resolved",
          "winning_option"
        ]
      },
      {
        "name": "UserMicrochain",
        "purpose": "Maintains each user’s or agent’s wallet, history, and market participations.",
        "functions": {
          "deposit": "Add testnet tokens to balance.",
          "withdraw": "Withdraw winnings.",
          "sync_with_market": "Reflects position updates from MarketMicrochains."
        }
      }
    ]
  },

  "backend_AI_agent_layer": {
    "overview": "AI agents autonomously join and trade in markets, using external signals and internal models to make predictions.",
    "components": {
      "agent_core": "Node.js runtime implementing MCP/GraphQL communication with Linera microchains.",
      "data_inputs": [
        "Live crypto price feeds",
        "Sports API (e.g., live football or esports events)",
        "Social sentiment from X/Twitter"
      ],
      "logic": {
        "signal_processing": "Converts raw data into probabilities.",
        "decision_engine": "Chooses markets and sides to trade on.",
        "execution": "Places trades or resolves micro-markets via Linera SDK."
      }
    },
    "ai_model": {
      "type": "Rule-based + optional LLM integration",
      "goals": [
        "Predict short-term outcomes (1–10 minutes)",
        "Automatically manage risk via position sizing",
        "Provide human-readable reasoning in frontend"
      ]
    }
  },

  "frontend_requirements": {
    "framework": "React + Tailwind + Framer Motion",
    "features": [
      "Real-time market creation and participation UI",
      "Live odds and price updates streamed via Linera SDK",
      "Leaderboard of top-performing agents and users",
      "User wallet dashboard with transaction history",
      "AI agent visualization panel (displaying current positions and reasoning)"
    ],
    "pages": [
      "Home — Overview of all markets",
      "Market Details — View and join active markets",
      "My Portfolio — User/Agent-specific microchain data",
      "AI Arena — Monitor AI bots and copy-trade options"
    ]
  },

  "deployment_plan": {
    "blockchain": "Deploy contracts to Linera testnet via CLI SDK",
    "frontend_hosting": "Deploy frontend to DeWeb or Vercel using Linera wallet integration",
    "backend_hosting": "Node.js/Golang service deployed to fly.io or DeWeb compute node",
    "oracles": "External WebSocket bridge hosted on the same backend instance",
    "demo_video": "Record real-time demo showing AI agent trading and instant resolution"
  },

  "timeline": {
    "wave_1": "Implement core market contract + minimal frontend",
    "wave_2": "Add AI trading agent and user dashboard",
    "wave_3": "Integrate live data oracles + copy-trading + UX polish",
    "wave_4": "Optimize microchain messaging + deploy stable demo",
    "wave_5": "Launch multi-agent test simulation and leaderboard",
    "wave_6": "Finalize mainnet-ready version + full documentation"
  },

  "success_metrics": {
    "tech": [
      "Sub-1-second market update latency",
      "Parallel user scaling (1 microchain per participant)",
      "No failed transactions under load"
    ],
    "product": [
      "≥50 active test users or agents",
      "Smooth real-time UX (Web2-level interactivity)",
      "Positive feedback from Linera mentors"
    ]
  },

  "team_roles": {
    "smart_contract_dev": "Implement MarketRegistry, MarketMicrochain, and UserMicrochain contracts",
    "backend_agent_dev": "Build Node.js agent service and integrate AI logic",
    "frontend_dev": "Develop real-time dashboard and WebSocket UI",
    "designer": "Create intuitive UX and market visualization",
    "project_manager": "Handle submission, documentation, and demo prep"
  },

  "submission_requirements": {
    "repo": "https://github.com/your-username/synapse-market",
    "readme": "Setup instructions, architecture diagram, and usage guide",
    "demo": "Live demo link or YouTube video showing live market resolution",
    "notes": "Document Linera SDK methods and microchain design used",
    "contact": {
      "telegram": "@yourhandle",
      "x_twitter": "@yourhandle"
    }
  }
}
